
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from "@/hooks/use-toast";

const SUPABASE_URL = "https://uzktgfhnbiqbqfyohvan.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV6a3RnZmhuYmlxYnFmeW9odmFuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5MzY3MzMsImV4cCI6MjA2MTUxMjczM30.SCapPADFHdyD08M4G-PWwd_LDKU7XlW5fDxDXhd8gJA";

// Configure Supabase client with enhanced auth settings and error handling
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage,
      detectSessionInUrl: true,
      flowType: 'pkce',
      debug: false
    },
    global: {
      headers: {
        'x-application-name': 'chichi-app'
      }
    }
  }
);

// Test Supabase connection with better error handling
export const testSupabaseConnection = async () => {
  try {
    console.log('Testing Supabase connection...');
    const { data, error } = await supabase.auth.getUser();
    
    if (error && error.message !== 'Auth session missing!') {
      console.error('Supabase connection test failed:', error);
      return { connected: false, error };
    }
    
    console.log('Supabase connection test successful:', { hasUser: !!data.user });
    return { connected: true, error: null };
  } catch (error) {
    console.error('Supabase connection failed:', error);
    return { connected: false, error };
  }
};

// Enhanced error handling wrapper for Supabase requests
export const safeRequest = async <T>(
  request: Promise<any>,
  errorMessage: string = "An error occurred",
  showToast: boolean = false
): Promise<{ data: T | null; error: Error | null }> => {
  try {
    const response = await request;
    
    if (response.error) {
      console.error("Supabase error:", response.error);
      
      // Only show toast for critical errors, not auth-related ones
      if (showToast && !response.error.message?.includes('Auth session missing')) {
        toast({
          title: "Error",
          description: response.error.message || errorMessage,
          variant: "destructive",
        });
      }
      
      return { data: null, error: response.error };
    }
    
    return { data: response.data as T, error: null };
  } catch (error) {
    console.error("Unexpected error:", error);
    
    if (showToast) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : errorMessage,
        variant: "destructive",
      });
    }
    
    return { 
      data: null, 
      error: error instanceof Error ? error : new Error(errorMessage) 
    };
  }
};

// Helper functions for achievement and streak tracking
export async function updateUserStreak(userId: string, currentStreak: number, longestStreak: number) {
  console.log(`Updating streak for user ${userId}: current=${currentStreak}, longest=${longestStreak}`);
  
  try {
    const { error } = await supabase
      .from('user_profiles')
      .update({ 
        current_streak: currentStreak, 
        longest_streak: longestStreak,
        last_activity_date: new Date().toISOString()
      })
      .eq('id', userId);
      
    if (error) {
      console.error('Failed to update user streak:', error);
    }
  } catch (error) {
    console.error('Exception updating user streak:', error);
  }
}

export async function unlockAchievement(userId: string, achievementId: string) {
  console.log(`Unlocking achievement ${achievementId} for user ${userId}`);
  
  try {
    // Get current achievements
    const { data: profile } = await supabase
      .from('user_profiles')
      .select('unlocked_achievements')
      .eq('id', userId)
      .maybeSingle();
      
    if (profile) {
      const currentAchievements = profile.unlocked_achievements || [];
      
      if (!currentAchievements.includes(achievementId)) {
        const { error } = await supabase
          .from('user_profiles')
          .update({ 
            unlocked_achievements: [...currentAchievements, achievementId]
          })
          .eq('id', userId);
          
        if (error) {
          console.error('Failed to unlock achievement:', error);
        }
      }
    }
  } catch (error) {
    console.error('Exception unlocking achievement:', error);
  }
}

// Initialize connection test on load with error handling
testSupabaseConnection().catch(error => {
  console.warn('Initial connection test failed:', error);
});
